<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationSettingMissing" xml:space="preserve">
    <value>The application setting key '{0}' is missing or has an illegal value.</value>
    <comment>{0} = Name of the application setting key.</comment>
  </data>
  <data name="DirectoryNotFound" xml:space="preserve">
    <value>Directory not found: {0}</value>
    <comment>{0} = Path of directory.</comment>
  </data>
  <data name="ExistingMappingRule" xml:space="preserve">
    <value>Rule already exists: {0} -&gt; {1}</value>
    <comment>{0} = Input værdi, {1} = Output værdi</comment>
  </data>
  <data name="ErrorReadingFieldValue" xml:space="preserve">
    <value>Error while reading value for the field named '{0}' in the table named '{1}': {2}</value>
    <comment>{0} = Field name, {1} = Table name, {2} = Error message.</comment>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File not found: '{0}'</value>
    <comment>{0} = File name.</comment>
  </data>
  <data name="IllegalValue" xml:space="preserve">
    <value>The value '{0}' is illegal for '{1}'.</value>
    <comment>{0} =Value, {1} = Name of value.</comment>
  </data>
  <data name="MapByDictionaryFailed" xml:space="preserve">
    <value>Mapping by dictionary failed: {0}</value>
    <comment>{0} = Key value</comment>
  </data>
  <data name="MapByReflectionFailed" xml:space="preserve">
    <value>Mapping by reflection failed: {0}.{1}({2})</value>
    <comment>{0} = Target type, {1} Reflection method, {2} = Method argument</comment>
  </data>
  <data name="MapByTypeCastFailed" xml:space="preserve">
    <value>Mapping by type cast failed: ({0}) '{1}'</value>
    <comment>{0} = Cast type, {1} = Value</comment>
  </data>
  <data name="RepositoryError" xml:space="preserve">
    <value>Error in repository method '{0}': {1}</value>
    <comment>{0} = Method name, {1} = Error message.</comment>
  </data>
  <data name="MissingChildNode" xml:space="preserve">
    <value>There are no child node named '{0}' on the node '{1}'.</value>
    <comment>{0} = Name of child node, {1} =Name of parent node.</comment>
  </data>
  <data name="FieldNotFound" xml:space="preserve">
    <value>Field not found: {0}</value>
    <comment>{0} = Field name.</comment>
  </data>
  <data name="TableNotFound" xml:space="preserve">
    <value>Table not found: {0}</value>
    <comment>{0} = Table name.</comment>
  </data>
  <data name="InvalidFieldLength" xml:space="preserve">
    <value>Invalid field length: {0}</value>
    <comment>{0} = Field length</comment>
  </data>
  <data name="FieldTableMismatch" xml:space="preserve">
    <value>The field table does not match the expected: {0} != {1}</value>
    <comment>{0} = Field table, {1} = Expected table</comment>
  </data>
  <data name="UnableToFindMatchingKey" xml:space="preserve">
    <value>Unable to find matching key on table '{0}'.</value>
    <comment>{0} = Table name.</comment>
  </data>
  <data name="InvalidChildNodeCount" xml:space="preserve">
    <value>Invalid count of child nodes named '{0}' on the node '{1}'.</value>
    <comment>{0} = Name of child nodes, {1} =Name of parent node.</comment>
  </data>
  <data name="InvalidCardinality" xml:space="preserve">
    <value>Invalid cardinality.</value>
  </data>
  <data name="MethodNotFoundOnType" xml:space="preserve">
    <value>The method named '{0}' does not exist on the type '{1}'.</value>
    <comment>{0} = Name of method, {1} = Name of type.</comment>
  </data>
  <data name="TypeMismatch" xml:space="preserve">
    <value>Mismatch between types: '{0}' and '{1}' in '{2}'</value>
    <comment>{0} = First type,  {1} = Secord type, {2} = Class or method name.</comment>
  </data>
  <data name="UnableToCreateInstanceOfType" xml:space="preserve">
    <value>Unable to create an instance of '{0}'.</value>
    <comment>{0} =Name of type.</comment>
  </data>
  <data name="ErrorHandleException" xml:space="preserve">
    <value>Error while handling exception: {0}</value>
    <comment>{0} = Error message.</comment>
  </data>
  <data name="MissingCandidateKeysOnTable" xml:space="preserve">
    <value>Missing candidate keys on the table named '{0}'.</value>
    <comment>{0} = Table name.</comment>
  </data>
  <data name="MissingFieldsOnCandidateKey" xml:space="preserve">
    <value>Missing fields on the candidate key named '{0}' on the table named '{1}'.</value>
    <comment>{0} = Candidate key name, {1} = Table name.</comment>
  </data>
  <data name="UniqueConstraintViolationOnCandidateKey" xml:space="preserve">
    <value>Unique constraint violation on the candidate key named '{0}'.</value>
    <comment>{0} = Candidate key name.</comment>
  </data>
  <data name="DataSourceAlreadySet" xml:space="preserve">
    <value>The DataSource was already set.</value>
  </data>
  <data name="DataSourceNotSet" xml:space="preserve">
    <value>The DataSource was not set.</value>
  </data>
  <data name="DataTypeNotSupported" xml:space="preserve">
    <value>The DataType is not supported: {0}</value>
    <comment>{0} = datatype</comment>
  </data>
  <data name="DirectoryCreateError" xml:space="preserve">
    <value>The folder could not be created: {0}</value>
    <comment>{0} = folder</comment>
  </data>
  <data name="FileWriteError" xml:space="preserve">
    <value>The file could not be created: {0}</value>
    <comment>{0} = filename</comment>
  </data>
  <data name="ResourceNotFound" xml:space="preserve">
    <value>Embedded resource was not found: {0}</value>
    <comment>{0} = resource</comment>
  </data>
  <data name="FileCopyError" xml:space="preserve">
    <value>The file could not be copied: {0} -&gt; {1}</value>
    <comment>{0} = sourcefile, {1} = destination file</comment>
  </data>
  <data name="MissingCandidateKeyOnForeignKey" xml:space="preserve">
    <value>Missing candidate key on the foreign key named '{0}' in the table named '{1}'.</value>
    <comment>{0} = Foreign key name, {1} = Table name.</comment>
  </data>
  <data name="TooManyForeignKeyRelationships" xml:space="preserve">
    <value>There are more than one relationship for the foreign key named '{0}' in the table named '{1}': {2}</value>
    <comment>{0} = Foreign key name, {1} = Table name, {2} = Foreign key values.</comment>
  </data>
  <data name="UnableToFindForeignKeyRelationship" xml:space="preserve">
    <value>Unable to find relationships for the foreign key named '{0}' in the table named '{1}': {2}</value>
    <comment>{0} = Foreign key name, {1} = Table name, {2} = Foreign key values.</comment>
  </data>
  <data name="UnableToMatchFieldsOnForeignKey" xml:space="preserve">
    <value>Unable to match fields on the candidate key named '{0}' with fields on the foreign key named '{1}' in the table named '{2}.</value>
    <comment>{0} = Candidate key name, {1} = Foreign key name, {2} = Table name.</comment>
  </data>
  <data name="NamedConnectionStringMissing" xml:space="preserve">
    <value>The connection string named '{0}' is missing or has an illegal value in the application configuration file.</value>
    <comment>{0} = Name of the connection string.</comment>
  </data>
  <data name="FieldNotFoundOnTable" xml:space="preserve">
    <value>The field named '{0}' does not exist on the table named '{1}'.</value>
    <comment>{0} = Field name, {1} = Table name.</comment>
  </data>
  <data name="UnableToMapDataTypeFromDatabase" xml:space="preserve">
    <value>Unable to map the data type '{0}' to '{1}' on the field named '{2}' in the table named '{3}'.</value>
    <comment>{0} = Name of data type from database, {1} = Data type for the field, {2} = Field name, {3} = Table name.</comment>
  </data>
  <data name="InvalidFilterValue" xml:space="preserve">
    <value>The filter value '{0}' does not match the pattern '{1}'.</value>
    <comment>{0} = Filter value, {1} = Pattern.</comment>
  </data>
  <data name="ParseError" xml:space="preserve">
    <value>Error while parsing {0}.Parse({1}): {2}</value>
    <comment>{0} = Type, {1} = Value to parse, {2} =Error message.</comment>
  </data>
  <data name="XmlValidationError" xml:space="preserve">
    <value>An error occurred when validating the XML: {0}</value>
    <comment>{0} = Validation error message.</comment>
  </data>
  <data name="PropertyNotFoundOnType" xml:space="preserve">
    <value>The property name '{0}' does not exist on the type '{1}'.</value>
    <comment>{0} = Name of property, {1} = Name of type.</comment>
  </data>
  <data name="UnableToMapValueForField" xml:space="preserve">
    <value>Unable to map the value '{0}' for the field named '{1}' on the table named '{2}': {3}</value>
    <comment>{0} = Value, {1} = Field name, {2} = Table name, {3} = Error message.</comment>
  </data>
  <data name="UnableToParseValueForField" xml:space="preserve">
    <value>Unable to parse the value '{0}' for the field named '{1}' on the table named '{2}': {3}</value>
    <comment>{0} = Value, {1} = Field name, {2} = Table name, {3} = Error message.</comment>
  </data>
  <data name="UnableToGetValueForField" xml:space="preserve">
    <value>Unable to get value for the field named '{0}' on the table named '{1}': {2}</value>
    <comment>{0} = Field name, {1} = Table name, {2} = Error message.</comment>
  </data>
  <data name="FieldNotFoundOnType" xml:space="preserve">
    <value>The field named '{0}' does not exist on the type '{1}'.</value>
    <comment>{0} = Name of field, {1} = Name of type.</comment>
  </data>
  <data name="UnableToGetDataQueryer" xml:space="preserve">
    <value>Unable to get data queryer for the data repository '{0}': {1}</value>
    <comment>{0} = Type of data repository, {1} = Error message.</comment>
  </data>
  <data name="UnableToCreateCriteria" xml:space="preserve">
    <value>Unable to create an instance of the criteria '{0}': {1}</value>
    <comment>{0} = Type of criteria, {1} = Error message.</comment>
  </data>
  <data name="InvokeError" xml:space="preserve">
    <value>Error while invoking {0}.{1}: {2}</value>
    <comment>{0} = Name of type, {1} = Name of method, {2} = Error message.</comment>
  </data>
</root>